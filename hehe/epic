#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <math.h>
#include <stdio.h>

//MATH
typedef struct {
	float f[3];
} vec3f;
typedef struct {
	float f[4];
} vec4f;
typedef struct {
	float m[4][4];
} mat4f;

mat4f matrix_identity() {
	mat4f mat = { 0 }; for (int i = 0; i < 4; i++) mat.m[i][i] = 1;
	return mat;
}

mat4f matrix_fromVector(vec3f vec) {
	mat4f mat = matrix_identity();
	for (int i = 0; i < 3; i++) mat.m[3][i] = vec.f[i];
	return mat;
}

mat4f matrix_createPerspective(float fov, float aspect, float near, float far) {
	mat4f mat = { {{0}} };
	float tanHalfFOV = tanf(fov / 2.0f);
	mat.m[0][0] = 1.0f / (aspect * tanHalfFOV);
	mat.m[1][1] = 1.0f / tanHalfFOV;
	mat.m[2][2] = -(far + near) / (far - near);
	mat.m[2][3] = -1.0f;
	mat.m[3][2] = -(2.0f * far * near) / (far - near);

	// Ensure other values are zero
	mat.m[0][1] = mat.m[0][2] = mat.m[0][3] = 0.0f;
	mat.m[1][0] = mat.m[1][2] = mat.m[1][3] = 0.0f;
	mat.m[2][0] = mat.m[2][1] = 0.0f;
	mat.m[3][0] = mat.m[3][1] = mat.m[3][3] = 0.0f;

	return mat;
}

//ty chatgpt
float matrix_dotProduct(vec3f a, vec3f b) {
	float result = 0.0f;
	for (int i = 0; i < 3; i++) {
		result += a.f[i] * b.f[i]; // Multiply corresponding components and sum
	}
	return result;
}

vec3f matrix_crossProduct(vec3f a, vec3f b) {
	vec3f result;
	result.f[0] = a.f[1] * b.f[2] - a.f[2] * b.f[1];
	result.f[1] = a.f[2] * b.f[0] - a.f[0] * b.f[2];
	result.f[2] = a.f[0] * b.f[1] - a.f[1] * b.f[0];
	return result;
}

vec4f matrix_vectorMulti(mat4f a, vec4f b) {
	vec4f result = { 0 }; // Initialize result vector to 0
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			result.f[i] += a.m[i][j] * b.f[j]; // Perform dot product of matrix row and vector
		}
	}
	return result;
}

mat4f matrix_scalarMulti(mat4f a, float scalar) {
	mat4f result = { 0 };
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			result.m[i][j] = a.m[i][j] * scalar;
	return result;
}

mat4f matrix_matMulti(mat4f a, mat4f b) {
	mat4f result = { 0 }; // Initialize result matrix to 0
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			for (int k = 0; k < 4; k++) {
				result.m[i][j] += a.m[i][k] * b.m[k][j]; // Multiply row of `a` by column of `b`
			}
		}
	}
	return result;
}

//thanks chatgpt
mat4f matrix_rotate(mat4f mat, vec4f axis_angle) {
	vec3f axis = { { axis_angle.f[0], axis_angle.f[1], axis_angle.f[2] } };
	float angle = axis_angle.f[3];

	// Normalize the rotation axis
	float axis_length = sqrt(axis.f[0] * axis.f[0] + axis.f[1] * axis.f[1] + axis.f[2] * axis.f[2]);
	axis.f[0] /= axis_length;
	axis.f[1] /= axis_length;
	axis.f[2] /= axis_length;

	// Precompute sine and cosine
	float cos_theta = cos(angle);
	float sin_theta = sin(angle);
	float one_minus_cos = 1.0f - cos_theta;

	// Rotation matrix components
	float x = axis.f[0], y = axis.f[1], z = axis.f[2];
	mat4f rotation = { 0 };
	rotation.m[0][0] = cos_theta + x * x * one_minus_cos;
	rotation.m[0][1] = x * y * one_minus_cos - z * sin_theta;
	rotation.m[0][2] = x * z * one_minus_cos + y * sin_theta;
	rotation.m[0][3] = 0.0f;

	rotation.m[1][0] = y * x * one_minus_cos + z * sin_theta;
	rotation.m[1][1] = cos_theta + y * y * one_minus_cos;
	rotation.m[1][2] = y * z * one_minus_cos - x * sin_theta;
	rotation.m[1][3] = 0.0f;

	rotation.m[2][0] = z * x * one_minus_cos - y * sin_theta;
	rotation.m[2][1] = z * y * one_minus_cos + x * sin_theta;
	rotation.m[2][2] = cos_theta + z * z * one_minus_cos;
	rotation.m[2][3] = 0.0f;

	rotation.m[3][0] = 0.0f;
	rotation.m[3][1] = 0.0f;
	rotation.m[3][2] = 0.0f;
	rotation.m[3][3] = 1.0f;

	// Multiply the input matrix with the rotation matrix
	return matrix_matMulti(mat, rotation);
}

mat4f matrix_translate(mat4f mat, vec3f vector) {
	mat4f new_vec = matrix_fromVector(vector);
	return matrix_matMulti(mat, new_vec);
}

//GL DATA
// Cube vertex data with unique colors for each face
float vertices[] = {
	// Positions           // Colors (one color per face)
	// Back face (Red)
	-0.5f, -0.5f, -0.5f,  1.0f, 0.0f, 0.0f,
	 0.5f, -0.5f, -0.5f,  1.0f, 0.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 0.0f, 0.0f,
	-0.5f,  0.5f, -0.5f,  1.0f, 0.0f, 0.0f,

	// Front face (Green)
	-0.5f, -0.5f,  0.5f,  0.0f, 1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  0.0f, 1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  0.0f, 1.0f, 0.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 1.0f, 0.0f,

	// Left face (Blue)
	-0.5f, -0.5f, -0.5f,  0.0f, 0.0f, 1.0f,
	-0.5f,  0.5f, -0.5f,  0.0f, 0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,  0.0f, 0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f, 1.0f,

	// Right face (Yellow)
	 0.5f, -0.5f, -0.5f,  1.0f, 1.0f, 0.0f,
	 0.5f,  0.5f, -0.5f,  1.0f, 1.0f, 0.0f,
	 0.5f,  0.5f,  0.5f,  1.0f, 1.0f, 0.0f,
	 0.5f, -0.5f,  0.5f,  1.0f, 1.0f, 0.0f,

	 // Top face (Magenta)
	 -0.5f,  0.5f, -0.5f,  1.0f, 0.0f, 1.0f,
	  0.5f,  0.5f, -0.5f,  1.0f, 0.0f, 1.0f,
	  0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 1.0f,
	 -0.5f,  0.5f,  0.5f,  1.0f, 0.0f, 1.0f,

	 // Bottom face (Cyan)
	 -0.5f, -0.5f, -0.5f,  0.0f, 1.0f, 1.0f,
	  0.5f, -0.5f, -0.5f,  0.0f, 1.0f, 1.0f,
	  0.5f, -0.5f,  0.5f,  0.0f, 1.0f, 1.0f,
	 -0.5f, -0.5f,  0.5f,  0.0f, 1.0f, 1.0f
};

// Cube indices for drawing with EBO (adjusted for new vertices)
unsigned int indices[] = {
	0, 1, 2, 2, 3, 0,       // Back face
	4, 5, 6, 6, 7, 4,       // Front face
	8, 9, 10, 10, 11, 8,    // Left face
	12, 13, 14, 14, 15, 12, // Right face
	16, 17, 18, 18, 19, 16, // Top face
	20, 21, 22, 22, 23, 20  // Bottom face
};

// Vertex Shader Source
const char* vertexShaderSource =
"#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"layout (location = 1) in vec3 aColor;\n"
"out vec3 ourColor;\n"
"uniform mat4 projection;\n"
"uniform mat4 view;\n"
"uniform mat4 model;\n"
"void main() {\n"
"	 vec3 pos = aPos;\n"
"    gl_Position = projection * view * model * vec4(pos, 1);\n"
"    ourColor = aColor;\n"
"}\n";

// Fragment Shader Source
const char* fragmentShaderSource =
"#version 330 core\n"
"out vec4 FragColor;\n"
"in vec3 ourColor;\n"
"void main() {\n"
"    FragColor = vec4(ourColor, 1);\n"
"}\n";


//CALLBACK FUNCTIONS
void error_callback(int error, const char* description) {
	fprintf(stderr, "Error %s\n", description);
}
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods) {
	if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
		glfwSetWindowShouldClose(window, GLFW_TRUE);
	}
}

//SETUP GL PROGRAMS
typedef struct {
	GLuint VAO;
	GLuint VBO;
	GLuint EBO;
} glBuffers;

typedef struct {
	float* vertices;
	unsigned int* indices;
	size_t vertices_size;
	size_t indices_size;
} glBufferContent;

GLuint OPENGLcompile_shader(const char* vert, const char* frag) {
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vert, NULL);
	glCompileShader(vertexShader);

	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &frag, NULL);
	glCompileShader(fragmentShader);

	GLuint shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, vertexShader);
	glAttachShader(shaderProgram, fragmentShader);
	glLinkProgram(shaderProgram);

	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	return shaderProgram;
}

void OPENGLsetup_buffers(glBuffers* buffers, glBufferContent* content) {
	// Generate and bind buffers
	glGenVertexArrays(1, &buffers->VAO);
	glGenBuffers(1, &buffers->VBO);
	glGenBuffers(1, &buffers->EBO);

	glBindVertexArray(buffers->VAO);

	// Bind and buffer the vertex data (positions and colors)
	glBindBuffer(GL_ARRAY_BUFFER, buffers->VBO);
	glBufferData(GL_ARRAY_BUFFER, content->vertices_size, content->vertices, GL_STATIC_DRAW);

	// Bind and buffer the index data
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, buffers->EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, content->indices_size, content->indices, GL_STATIC_DRAW);

	// Set vertex attribute pointers
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)0); // Position
	glEnableVertexAttribArray(0);

	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 6 * sizeof(float), (void*)(3 * sizeof(float))); // Color
	glEnableVertexAttribArray(1);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}

void OPENGLbindUniform_Mat4f(GLuint program, const char* field, mat4f data) {
	GLint location = glGetUniformLocation(program, field);
	glUniformMatrix4fv(location, 1, GL_FALSE, &data.m[0][0]);
}

int main() {
	glfwSetErrorCallback(error_callback);
	if (!glfwInit()) {
		fprintf(stderr, "Failed to initialize GLFW.\n");
	}

	GLFWwindow* window = glfwCreateWindow(800, 600, "opengl in c", NULL, NULL);
	if (!window) {
		fprintf(stderr, "Failed to create GLFW window.\n");
		glfwTerminate();
	}

	glfwMakeContextCurrent(window);
	gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);

	GLuint shaderProgram = OPENGLcompile_shader(vertexShaderSource, fragmentShaderSource);

	glBuffers buffers;
	glBufferContent content = {
		vertices,
		indices,
		sizeof(vertices),
		sizeof(indices)
	};
	OPENGLsetup_buffers(&buffers, &content);

	glEnable(GL_DEPTH_TEST);

	while (!glfwWindowShouldClose(window)) {
		glfwSetKeyCallback(window, key_callback);

		double time = glfwGetTime();
		int width, height;
		glfwGetFramebufferSize(window, &width, &height);
		const float ratio = width / (float)height;

		glClearColor(0.2f, 0.3f, 0.3f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
		glViewport(0, 0, width, height);
		
		glUseProgram(shaderProgram);

		mat4f projection = matrix_createPerspective(70.f, ratio, 0.1f, 100.f);
		OPENGLbindUniform_Mat4f(shaderProgram, "projection", projection);
		
		mat4f view = matrix_identity();
		OPENGLbindUniform_Mat4f(shaderProgram, "view", view);

		mat4f model = matrix_identity();
		model = matrix_rotate(model, (vec4f){ 0.9, 0.6, 0.3, (float)time });
		model = matrix_translate(model, (vec3f) { 0, 0, -2 });
		OPENGLbindUniform_Mat4f(shaderProgram, "model", model);

		glBindVertexArray(buffers.VAO);
		glDrawElements(GL_TRIANGLES, 36, GL_UNSIGNED_INT, 0);

		glfwSwapInterval(1);
		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glDeleteVertexArrays(1, &buffers.VAO);
	glDeleteBuffers(1, &buffers.VBO);
	glDeleteBuffers(1, &buffers.EBO);
	glDeleteProgram(shaderProgram);

	glfwDestroyWindow(window);
	glfwTerminate();

	return 0;
}
