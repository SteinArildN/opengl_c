#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <stdio.h>

#define STB_IMAGE_IMPLEMENTATION
#include "stb_image.h"

#include <math.h>
#define PI 3.14159265358979323846

// Vertex Shader Source with texture!!
const char* vertex_source =
"#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"layout (location = 1) in vec3 aColor;\n"
"layout (location = 2) in vec2 aTexCoord;\n"  // Change to vec2 for texture coordinates
"out vec3 ourColor;\n"
"out vec2 TexCoord;\n"
"uniform mat4 projection;\n"
"uniform mat4 view;\n"
"uniform mat4 model;\n"
"void main() {\n"
"    gl_Position = projection * view * model * vec4(aPos, 1.0);\n"
"    ourColor = aColor;\n"
"    TexCoord = aTexCoord;\n"  // Add the semicolon here
"}\n";

// Fragment Shader Source
const char* fragment_source =
"#version 330 core\n"
"out vec4 FragColor;\n"
"in vec3 ourColor;\n"
"in vec2 TexCoord;\n"  // Texture coordinates passed from the vertex shader
"uniform sampler2D texture1;\n"  // The texture
"void main() {\n"
"    vec4 textureColor = texture(texture1, TexCoord);  // Sample the texture\n"
"    FragColor = textureColor * vec4(ourColor, 1.0);  // Combine texture color with vertex color\n"
"}\n";

//random hehe
int int_random(int min, int max) {
	return min + rand() / (RAND_MAX / (max - min + 1) + 1);
}
float float_random(float min, float max) {
	return min + rand() / (RAND_MAX / (max - min + 1) + 1);
}

//math
typedef struct vec2 {
	float f[2];
} vec2;
typedef struct vec3 {
	float f[3];
} vec3;
typedef struct vec4 {
	float f[4];
} vec4;
typedef struct mat4 {
	float m[4][4];
} mat4;
//vector
vec3 vector_combine(vec3 a, vec3 b) {
	for (int i = 0; i < 3; i++) a.f[i] += b.f[i];
	return a;
}
vec3 vector_scalar(vec3 a, float b) {
	for (int i = 0; i < 3; i++) a.f[i] *= b;
	return a;
}
vec3 vector_multi(vec3 a, vec3 b) {
	for (int i = 0; i < 3; i++) a.f[i] *= b.f[i];
	return a;
}
//this doesnt account for roll rotation
vec3 vector_rotate3d(vec3 vec, vec3 rot) {
	rot.f[0] *= (PI / 180);
	rot.f[1] *= (PI / 180);
	//rot.f[2] *= (PI / 180);
	vec.f[0] *= cosf(rot.f[0]) * sinf(rot.f[1]);
	vec.f[1] *= sinf(-rot.f[0]);
	vec.f[2] *= cosf(rot.f[0]) * cosf(rot.f[1]);
	return vec;
}
//just for player movmeent...
vec3 vector_rotate2d(vec3 vec, vec3 rot) {
	rot.f[1] *= (PI / 180);
	vec.f[0] *= sinf(rot.f[1]);
	vec.f[2] *= cosf(rot.f[1]);
	return vec;
}
void vector_normalize(vec3* rot) {
	while (rot->f[0] < -180) rot->f[0] += 360;
	while (rot->f[0] > 180) rot->f[0] -= 360;
	while (rot->f[1] < -180) rot->f[1] += 360;
	while (rot->f[1] > 180) rot->f[1] -= 360;
}
void vector_clamp(vec3* rot) {
	if (rot->f[0] > 90)
		rot->f[0] = 90;
	if (rot->f[0] < -90)
		rot->f[0] = -90;
}
int vector_isEqual(vec3 a, vec3 b) {
	return (
		a.f[0] == b.f[0] &&
		a.f[1] == b.f[1] &&
		a.f[2] == b.f[2]
		);
}
//matrix
mat4 matrix_identity() {
	mat4 mat = { 0 };
	for (int i = 0; i < 4; i++) mat.m[i][i] = 1;
	return mat;
}
mat4 matrix_perspective(float fov, float aspect, float near, float far) {
	mat4 mat = { 0 };
	float tanHalfFOV = tanf(fov / 2.0f);
	mat.m[0][0] = 1.0f / (aspect * tanHalfFOV);
	mat.m[1][1] = 1.0f / tanHalfFOV;
	mat.m[2][2] = -(far + near) / (far - near);
	mat.m[2][3] = -1.0f;
	mat.m[3][2] = -(2.0f * far * near) / (far - near);
	return mat;
}
mat4 matrix_scalar(mat4 a, float b) {
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			a.m[i][j] *= b;
	return a;
}
mat4 matrix_multi(mat4 a, mat4 b) {
	mat4 result = { 0 };
	for (int i = 0; i < 4; i++)
		for (int j = 0; j < 4; j++)
			for (int k = 0; k < 4; k++)
				result.m[i][j] += a.m[i][k] * b.m[k][j];
	return result;
}
mat4 matrix_rotate(mat4 mat, vec4 axis_angle) { //ty chatgpt
	vec3 axis = { { axis_angle.f[0], axis_angle.f[1], axis_angle.f[2] } };
	float angle = axis_angle.f[3];

	float axis_length = sqrt(axis.f[0] * axis.f[0] + axis.f[1] * axis.f[1] + axis.f[2] * axis.f[2]);
	axis.f[0] /= axis_length;
	axis.f[1] /= axis_length;
	axis.f[2] /= axis_length;

	float cos_theta = cos(angle);
	float sin_theta = sin(angle);
	float one_minus_cos = 1.0f - cos_theta;

	float x = axis.f[0], y = axis.f[1], z = axis.f[2];
	mat4 rotation = { 0 };
	rotation.m[0][0] = cos_theta + x * x * one_minus_cos;
	rotation.m[0][1] = x * y * one_minus_cos - z * sin_theta;
	rotation.m[0][2] = x * z * one_minus_cos + y * sin_theta;
	rotation.m[0][3] = 0.0f;
	rotation.m[1][0] = y * x * one_minus_cos + z * sin_theta;
	rotation.m[1][1] = cos_theta + y * y * one_minus_cos;
	rotation.m[1][2] = y * z * one_minus_cos - x * sin_theta;
	rotation.m[1][3] = 0.0f;
	rotation.m[2][0] = z * x * one_minus_cos - y * sin_theta;
	rotation.m[2][1] = z * y * one_minus_cos + x * sin_theta;
	rotation.m[2][2] = cos_theta + z * z * one_minus_cos;
	rotation.m[2][3] = 0.0f;
	rotation.m[3][0] = 0.0f;
	rotation.m[3][1] = 0.0f;
	rotation.m[3][2] = 0.0f;
	rotation.m[3][3] = 1.0f;

	return matrix_multi(mat, rotation);
}
mat4 matrix_translate(mat4 mat, vec3 vec) {
	mat4 mat_translate = matrix_identity();
	for (int i = 0; i < 3; i++) mat_translate.m[3][i] = vec.f[i];
	return matrix_multi(mat, mat_translate);
}
mat4 matrix_scale(mat4 mat, vec3 scale) {
	for (int i = 0; i < 3; i++) mat.m[i][i] *= scale.f[i];
	return mat;
}
//yeah
int collision_check(vec3 a, vec3 a_size, vec3 b, vec3 b_size) {
	return (
		a.f[0] - a_size.f[0] < b.f[0] + b_size.f[0] &&
		a.f[0] + a_size.f[0] > b.f[0] - b_size.f[0] &&
		a.f[1] - a_size.f[1] < b.f[1] + b_size.f[1] &&
		a.f[1] + a_size.f[1] > b.f[1] - b_size.f[1] &&
		a.f[2] - a_size.f[2] < b.f[2] + b_size.f[2] &&
		a.f[2] + a_size.f[2] > b.f[2] - b_size.f[2]
		);
}

//static properties
#define FACE_FRONT  (1 << 0)
#define FACE_BACK   (1 << 1)
#define FACE_LEFT   (1 << 2)
#define FACE_RIGHT  (1 << 3)
#define FACE_TOP    (1 << 4)
#define FACE_BOTTOM (1 << 5)
#define FACE_ALL (FACE_FRONT | FACE_BACK | FACE_LEFT | FACE_RIGHT | FACE_TOP | FACE_BOTTOM)
//dynamic properties

//vertex struct
typedef struct vertex {
float x, y, z;
float r, g, b, a;
float u, v;
} vertex;
//opengl this is boiler plate!!
GLuint OPENGLcompileshader(const char* vert, const char* frag) {
	GLuint vertex_shader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertex_shader, 1, &vert, NULL);
	glCompileShader(vertex_shader);
	GLuint fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragment_shader, 1, &frag, NULL);
	glCompileShader(fragment_shader);

	GLuint shader_program = glCreateProgram();
	glAttachShader(shader_program, vertex_shader);
	glAttachShader(shader_program, fragment_shader);
	glLinkProgram(shader_program);

	glDeleteShader(vertex_shader);
	glDeleteShader(fragment_shader);

	return shader_program;
}
GLuint OPENGLloadTexture(const char* filename) {
	int width, height, channels;
	unsigned char* data = stbi_load(filename, &width, &height, &channels, 0);
	if (!data) {
		printf("Failed to load texture: %s\n", stbi_failure_reason());
	}

	GLuint texture;
	glGenTextures(1, &texture);
	glBindTexture(GL_TEXTURE_2D, texture);

	GLenum format = (channels == 4) ? GL_RGBA : GL_RGB;

	glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);

	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	stbi_image_free(data);
	return texture;
}
void OPENGLbind_mat4(GLuint program, const char* field, mat4 mat) {
	GLint location = glGetUniformLocation(program, field);
	glUniformMatrix4fv(location, 1, GL_FALSE, &mat.m[0][0]);
}
//opengl this is experimental
void OPENGLsetup_chunk(GLuint* VAO, GLuint* VBO, vertex* buffer, int count) {
	glGenVertexArrays(1, VAO);
	glGenBuffers(1, VBO);

	glBindVertexArray(*VAO);
	glBindBuffer(GL_ARRAY_BUFFER, *VBO);
	glBufferData(GL_ARRAY_BUFFER, count * sizeof(vertex), buffer, GL_STATIC_DRAW);

	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)0);
	glEnableVertexAttribArray(0);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, sizeof(vertex), (void*)(7 * sizeof(float)));
	glEnableVertexAttribArray(2);

	glBindBuffer(GL_ARRAY_BUFFER, 0);
	glBindVertexArray(0);
}
void addFaceToBuffer(vertex* buffer, int* count, vec3 pos, vec4 color, vec2 t_offset, int face) {
	float size = 0.5f;
	//size *= 0.5; //XD
	float tex_grid_size = 4;
	float tex_size = 2 / tex_grid_size;

	vertex faceVertices[6];

	float x = pos.f[0], y = pos.f[1], z = pos.f[2];
	float r = color.f[0], g = color.f[1], b = color.f[2], a = color.f[3];
	float u = t_offset.f[0] / tex_grid_size, v = t_offset.f[1] / tex_grid_size;

	switch (face) {
	case FACE_LEFT:
		faceVertices[0] = (vertex){ x - size, y - size, z - size, r, g, b, a, u, v };
		faceVertices[1] = (vertex){ x - size, y + size, z - size, r, g, b, a, u, v + tex_size };
		faceVertices[2] = (vertex){ x - size, y - size, z + size, r, g, b, a, u + tex_size, v };
		faceVertices[3] = (vertex){ x - size, y + size, z - size, r, g, b, a, u, v + tex_size };
		faceVertices[4] = (vertex){ x - size, y + size, z + size, r, g, b, a, u + tex_size, v + tex_size };
		faceVertices[5] = (vertex){ x - size, y - size, z + size, r, g, b, a, u + tex_size, v };
		break;

	case FACE_RIGHT:
		faceVertices[0] = (vertex){ x + size, y - size, z - size, r, g, b, a, u, v };
		faceVertices[1] = (vertex){ x + size, y - size, z + size, r, g, b, a, u + tex_size, v };
		faceVertices[2] = (vertex){ x + size, y + size, z - size, r, g, b, a, u, v + tex_size };
		faceVertices[3] = (vertex){ x + size, y + size, z - size, r, g, b, a, u, v + tex_size };
		faceVertices[4] = (vertex){ x + size, y - size, z + size, r, g, b, a, u + tex_size, v };
		faceVertices[5] = (vertex){ x + size, y + size, z + size, r, g, b, a, u + tex_size, v + tex_size };
		break;

	case FACE_FRONT:
		faceVertices[0] = (vertex){ x - size, y - size, z + size, r, g, b, a, u, v };
		faceVertices[1] = (vertex){ x - size, y + size, z + size, r, g, b, a, u, v + tex_size };
		faceVertices[2] = (vertex){ x + size, y - size, z + size, r, g, b, a, u + tex_size, v };
		faceVertices[3] = (vertex){ x - size, y + size, z + size, r, g, b, a, u, v + tex_size };
		faceVertices[4] = (vertex){ x + size, y + size, z + size, r, g, b, a, u + tex_size, v + tex_size };
		faceVertices[5] = (vertex){ x + size, y - size, z + size, r, g, b, a, u + tex_size, v };
		break;

	case FACE_BACK:
		faceVertices[0] = (vertex){ x - size, y - size, z - size, r, g, b, a, u, v };
		faceVertices[1] = (vertex){ x + size, y - size, z - size, r, g, b, a, u + tex_size, v };
		faceVertices[2] = (vertex){ x - size, y + size, z - size, r, g, b, a, u, v + tex_size };
		faceVertices[3] = (vertex){ x + size, y - size, z - size, r, g, b, a, u + tex_size, v };
		faceVertices[4] = (vertex){ x + size, y + size, z - size, r, g, b, a, u + tex_size, v + tex_size };
		faceVertices[5] = (vertex){ x - size, y + size, z - size, r, g, b, a, u, v + tex_size };
		break;

	case FACE_TOP:
		faceVertices[0] = (vertex){ x - size, y + size, z - size, r, g, b, a, u, v };
		faceVertices[1] = (vertex){ x - size, y + size, z + size, r, g, b, a, u, v + tex_size };
		faceVertices[2] = (vertex){ x + size, y + size, z - size, r, g, b, a, u + tex_size, v };
		faceVertices[3] = (vertex){ x - size, y + size, z + size, r, g, b, a, u, v + tex_size };
		faceVertices[4] = (vertex){ x + size, y + size, z + size, r, g, b, a, u + tex_size, v + tex_size };
		faceVertices[5] = (vertex){ x + size, y + size, z - size, r, g, b, a, u + tex_size, v };
		break;

	case FACE_BOTTOM:
		faceVertices[0] = (vertex){ x - size, y - size, z - size, r, g, b, a, u, v };
		faceVertices[1] = (vertex){ x + size, y - size, z - size, r, g, b, a, u + tex_size, v };
		faceVertices[2] = (vertex){ x - size, y - size, z + size, r, g, b, a, u, v + tex_size };
		faceVertices[3] = (vertex){ x + size, y - size, z - size, r, g, b, a, u + tex_size, v };
		faceVertices[4] = (vertex){ x + size, y - size, z + size, r, g, b, a, u + tex_size, v + tex_size };
		faceVertices[5] = (vertex){ x - size, y - size, z + size, r, g, b, a, u, v + tex_size };
		break;
	}

	memcpy(&buffer[*count], faceVertices, sizeof(faceVertices));
	*count += 6;
}

#define chunk_x 8
#define chunk_y 128
#define chunk_z 8
#define chunk_size (chunk_x * chunk_y * chunk_z)
struct cube {
	int type;
	vec3 pos;
};
struct chunk {
	uint8_t draw;
	uint8_t cubes[chunk_size];
	//gl related
	GLuint VAO, VBO;
	int vertexCount;
};

#define world_x 32
#define world_z 32
void initWorld(struct chunk** chunks) {
	for (int wx = 0; wx < world_x; wx++) 
		for (int wz = 0; wz < world_z; wz++) {
			int index = wx + wz * world_x;
			// Allocate memory for each chunk
			chunks[index] = malloc(sizeof(struct chunk));
			if (!chunks[index]) {
				printf("Memory allocation failed for chunk[%d]\n", index);
				continue;
			}
		}
}
void generateWorld(struct chunk** chunks) {
	for (int wx = 0; wx < world_x; wx++)
		for (int wz = 0; wz < world_z; wz++){
			int index = wx + wz * world_x;
			for (int x = 0; x < chunk_x; x++) 
				for (int y = 0; y < chunk_y; y++) 
					for (int z = 0; z < chunk_z; z++) {
						chunks[index]->draw = 1;
						if (y < chunk_y / 2)
							if (y < chunk_y / 2 - 1)
								chunks[index]->cubes[x + y * chunk_x + z * chunk_x * chunk_y] = 1;
							else
								chunks[index]->cubes[x + y * chunk_x + z * chunk_x * chunk_y] = 2;
						else
							chunks[index]->cubes[x + y * chunk_x + z * chunk_x * chunk_y] = 0;
					}
			}
}
void generateChunksMesh(struct chunk** chunks) {
	int max_vertices = chunk_size * 6 * 6;
	for (int wx = 0; wx < world_x; wx++) {
		for (int wz = 0; wz < world_z; wz++) {
			int index = wx + wz * world_x;
			if (chunks[index]->draw == 0)
				continue;
			// Initialize chunk values
			chunks[index]->vertexCount = 0;
			// Allocate vertex buffer
			vertex* vertexBuffer = (vertex*)malloc(sizeof(vertex) * max_vertices);
			if (!vertexBuffer) {
				printf("Memory allocation failed for vertex buffer in chunk[%d]\n", index);
				free(chunks[index]);
				continue;
			}
			// Generate chunk data
			for (int x = 0; x < chunk_x; x++) {
				for (int y = 0; y < chunk_y; y++) {
					for (int z = 0; z < chunk_z; z++) {
						if (chunks[index]->cubes[x + y * chunk_x + z * chunk_x * chunk_y] == 0)
							continue;
						vec3 pos = { x + wx * chunk_x, y, z + wz * chunk_z };
						vec4 color = { 1, 1, 1, 1 };
						vec2 tex = { 0, 0 };
						switch (chunks[index]->cubes[x + y * chunk_x + z * chunk_x * chunk_y]) {
						case 1:
							tex = (vec2){ 2,0 };
							color = (vec4){ 0.5,0.5,0.5,1 };
							break;
						case 2:
							tex = (vec2){ 0,2 };
							color = (vec4){ 0.3,0.8,0.4,1 };
							break;
						case 3:
							tex = (vec2){ 2,2 };
							color = (vec4){ 0.8,0.2,0.1,1 };
							break;
						}
						addFaceToBuffer(vertexBuffer, &chunks[index]->vertexCount, pos, color, tex, FACE_BACK);
						addFaceToBuffer(vertexBuffer, &chunks[index]->vertexCount, pos, color, tex, FACE_FRONT);
						addFaceToBuffer(vertexBuffer, &chunks[index]->vertexCount, pos, color, tex, FACE_LEFT);
						addFaceToBuffer(vertexBuffer, &chunks[index]->vertexCount, pos, color, tex, FACE_RIGHT);
						addFaceToBuffer(vertexBuffer, &chunks[index]->vertexCount, pos, color, tex, FACE_TOP);
						addFaceToBuffer(vertexBuffer, &chunks[index]->vertexCount, pos, color, tex, FACE_BOTTOM);
					}
				}
			}
			// Setup OpenGL buffer
			OPENGLsetup_chunk(&chunks[index]->VAO, &chunks[index]->VBO, vertexBuffer, chunks[index]->vertexCount);
			// Cleanup vertex buffer
			free(vertexBuffer);
		}
	}
}


//camera... with some basic camera related functions
struct camera {
	vec3 pos;
	vec3 rot;
	int free_mode;
};
mat4 camera_to_matrix(struct camera* camera) {
	mat4 result = matrix_identity();
	result = matrix_translate(result, (vec3) {
		-camera->pos.f[0],
		-camera->pos.f[1],
		-camera->pos.f[2]
	});
	result = matrix_rotate(result, (vec4) { 0, 1, 0, camera->rot.f[1] * (PI / 180) });
	result = matrix_rotate(result, (vec4) { 1, 0, 0, camera->rot.f[0] * (PI / 180) });
	result = matrix_rotate(result, (vec4) { 0, 0, 1, camera->rot.f[2] * (PI / 180) });
	return result;
}
void camera_rotate(struct camera* camera, vec3 rot) {
	camera->rot = vector_combine(camera->rot, rot);
	//for (int i = 0; i < 3; i++) camera->rot.f[i] += rot.f[i];
	vector_normalize(&camera->rot);
	vector_clamp(&camera->rot);
}
void camera_translate(struct camera* camera, vec3 pos) {
	camera->pos = vector_combine(camera->pos, pos);
	//for (int i = 0; i < 3; i++) camera->pos.f[i] += pos.f[i];
}
void camera_set(struct camera* camera, vec3 pos, vec3 rot) {
	for (int i = 0; i < 3; i++) camera->rot.f[i] = rot.f[i];
	vector_normalize(&camera->rot);
	vector_clamp(&camera->rot);
	for (int i = 0; i < 3; i++) camera->pos.f[i] = pos.f[i];
}
void camera_print(struct camera* camera) {
	fprintf(stderr, "Camera coords: Pos{ %.f, ", camera->pos.f[0]);
	fprintf(stderr, "%.f, ", camera->pos.f[1]);
	fprintf(stderr, "%.f } Rot{ ", camera->pos.f[2]);
	fprintf(stderr, "%.f, ", camera->rot.f[0]);
	fprintf(stderr, "%.f, ", camera->rot.f[1]);
	fprintf(stderr, "%.f}\n", camera->rot.f[2]);
}

//main program
void error_callback(int error, const char* description) {
	fprintf(stderr, "Error: %s..", description);
}
void key_input(GLFWwindow* window) {
	if (glfwGetKey(window, GLFW_KEY_ESCAPE))
		glfwSetWindowShouldClose(window, GLFW_TRUE);
	if (glfwGetKey(window, GLFW_KEY_1))
		glPolygonMode(GL_FRONT_AND_BACK, GL_FILL);
	if (glfwGetKey(window, GLFW_KEY_2))
		glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);
}
int main() {
	glfwSetErrorCallback(error_callback);
	glfwInit();
	GLFWwindow* window = glfwCreateWindow(800, 600, "miner", NULL, NULL);
	glfwMakeContextCurrent(window);
	gladLoadGLLoader((GLADloadproc)glfwGetProcAddress);

	//initialize gl components
	GLuint shaderprogram = OPENGLcompileshader(vertex_source, fragment_source);
	//GLuint VAO, VBO;
	GLuint textures = OPENGLloadTexture("textures.png");
	glEnable(GL_DEPTH_TEST);

	//yeah
	/*
	int max_vertices = 24 * 6 * 6;
	vertex* vertexBuffer = (vertex*)malloc(sizeof(vertex) * max_vertices);
	int vertexCount = 0;
	vec3 pos = { 0,0,0 }; vec4 color = { 1,1,1,1 }; vec2 tex = { 0,0 };
	for (int i = 0; i < 24; i++) {
		pos.f[0] += 1;
		addFaceToBuffer(vertexBuffer, &vertexCount, pos, color, tex, FACE_BACK);
		addFaceToBuffer(vertexBuffer, &vertexCount, pos, color, tex, FACE_FRONT);
		addFaceToBuffer(vertexBuffer, &vertexCount, pos, color, tex, FACE_LEFT);
		addFaceToBuffer(vertexBuffer, &vertexCount, pos, color, tex, FACE_RIGHT);
		addFaceToBuffer(vertexBuffer, &vertexCount, pos, color, tex, FACE_TOP);
		addFaceToBuffer(vertexBuffer, &vertexCount, pos, color, tex, FACE_BOTTOM);
	}
	OPENGLsetup_chunk(&VAO, &VBO, vertexBuffer, vertexCount);
	*/
	//free(vertexBuffer);

	struct chunk** chunks = malloc(world_x * world_z * sizeof(struct chunk*)); // Array of chunk pointers
	initWorld(chunks);
	generateWorld(chunks);
	generateChunksMesh(chunks);
	
	/*
	int max_vertices = chunk_size * 6 * 6;
	struct chunk* chunks = (struct chunk*)malloc(sizeof(struct chunk) * world_x * world_z);
	memset(chunks, 0, sizeof(struct chunk) * (world_x * world_z));
	for (int wx = 0; wx < world_x; wx++)
		for (int wz = 0; wz < world_z; wz++) {
			vertex* vertexBuffer = (vertex*)malloc(sizeof(vertex) * max_vertices);
			for (int x = 0; x < chunk_x; x++)
				for (int y = 0; y < chunk_y; y++)
					for (int z = 0; z < chunk_z; z++) {
						vec3 pos = { x + wx * chunk_x,y,z + wz * chunk_z }; vec4 color = { 1,1,1,1 }; vec2 tex = { 0,0 };
						addFaceToBuffer(vertexBuffer, &chunks[wx + wz * world_x].vertexCount, pos, color, tex, FACE_BACK);
						addFaceToBuffer(vertexBuffer, &chunks[wx + wz * world_x].vertexCount, pos, color, tex, FACE_FRONT);
						addFaceToBuffer(vertexBuffer, &chunks[wx + wz * world_x].vertexCount, pos, color, tex, FACE_LEFT);
						addFaceToBuffer(vertexBuffer, &chunks[wx + wz * world_x].vertexCount, pos, color, tex, FACE_RIGHT);
						addFaceToBuffer(vertexBuffer, &chunks[wx + wz * world_x].vertexCount, pos, color, tex, FACE_TOP);
						addFaceToBuffer(vertexBuffer, &chunks[wx + wz * world_x].vertexCount, pos, color, tex, FACE_BOTTOM);
					}
			OPENGLsetup_chunk(&chunks[wx + wz * world_x].VAO, &chunks[wx + wz * world_x].VBO, vertexBuffer, chunks[wx + wz * world_x].vertexCount);
			free(vertexBuffer);
		}
	*/

	/*
	int max_vertices = chunk_size * 6 * 6;
	vertex* vertexBuffer = (vertex*)malloc(sizeof(vertex) * max_vertices);
	struct chunk chunk = { 0 };
	for (int x = 0; x < chunk_x; x++)
		for (int y = 0; y < chunk_y; y++)
			for (int z = 0; z < chunk_z; z++) {
				vec3 pos = { x,y,z }; vec4 color = { 1,1,1,1 }; vec2 tex = { 0,0 };
				addFaceToBuffer(vertexBuffer, &chunk.vertexCount, pos, color, tex, FACE_BACK);
				addFaceToBuffer(vertexBuffer, &chunk.vertexCount, pos, color, tex, FACE_FRONT);
				addFaceToBuffer(vertexBuffer, &chunk.vertexCount, pos, color, tex, FACE_LEFT);
				addFaceToBuffer(vertexBuffer, &chunk.vertexCount, pos, color, tex, FACE_RIGHT);
				addFaceToBuffer(vertexBuffer, &chunk.vertexCount, pos, color, tex, FACE_TOP);
				addFaceToBuffer(vertexBuffer, &chunk.vertexCount, pos, color, tex, FACE_BOTTOM);
			}
	OPENGLsetup_chunk(&chunk.VAO, &chunk.VBO, vertexBuffer, chunk.vertexCount);
	free(vertexBuffer);
	*/

	//initialize a camera
	struct camera camera = { 0 };
	camera.free_mode = 1;

	//some standard gl variables
	int width, height; float ratio;
	double time;
	while (!glfwWindowShouldClose(window)) {
		//handle inputs
		key_input(window);
		if (camera.free_mode != 0) {
			if (glfwGetKey(window, GLFW_KEY_UP))
				camera_rotate(&camera, (vec3) { 2, 0, 0 });
			if (glfwGetKey(window, GLFW_KEY_DOWN))
				camera_rotate(&camera, (vec3) { -2, 0, 0 });
			if (glfwGetKey(window, GLFW_KEY_LEFT))
				camera_rotate(&camera, (vec3) { 0, 2, 0 });
			if (glfwGetKey(window, GLFW_KEY_RIGHT))
				camera_rotate(&camera, (vec3) { 0, -2, 0 });
			float str = 0.5;
			if (glfwGetKey(window, GLFW_KEY_W))
				camera_translate(&camera, vector_rotate3d((vec3) { -str, -str, -str }, camera.rot));
			if (glfwGetKey(window, GLFW_KEY_S))
				camera_translate(&camera, vector_rotate3d((vec3) { str, str, str }, camera.rot));
		}

		glfwGetFramebufferSize(window, &width, &height);
		ratio = (float)width / (float)height;
		time = glfwGetTime();

		glViewport(0, 0, width, height);
		glClearColor(0.1, 0.2, 0.3, 1);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		mat4 projection = matrix_perspective(70, ratio, 0.1, 1000);
		OPENGLbind_mat4(shaderprogram, "projection", projection);

		mat4 view = matrix_identity();
		view = camera_to_matrix(&camera);
		OPENGLbind_mat4(shaderprogram, "view", view);

		glUseProgram(shaderprogram);
		mat4 model = matrix_identity();
		OPENGLbind_mat4(shaderprogram, "model", model);

		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, textures);
		glUniform1i(glGetUniformLocation(shaderprogram, "texture1"), 0);

		for (int x = 0; x < world_x; x++)
			for (int z = 0; z < world_z; z++) {
				float draw_size = chunk_x * 4;
				if (camera.pos.f[0] + draw_size > x * chunk_x &&
					camera.pos.f[0] - draw_size < (x * chunk_x) + chunk_x &&
					camera.pos.f[2] + draw_size > z * chunk_z &&
					camera.pos.f[2] - draw_size < (z * chunk_z) + chunk_z) {
					glBindVertexArray(chunks[x + z * world_x]->VAO);
					glDrawArrays(GL_TRIANGLES, 0, chunks[x + z * world_x]->vertexCount);
				}
			}
		/*
		for (int c = 0; c < world_x * world_z; c++) {
			glBindVertexArray(chunks[c]->VAO);
			glDrawArrays(GL_TRIANGLES, 0, chunks[c]->vertexCount);
		}
		*/
		//glBindVertexArray(chunk.VAO);
		//glDrawArrays(GL_TRIANGLES, 0, chunk.vertexCount);
		glBindVertexArray(0);
		glBindTexture(GL_TEXTURE_2D, 0);

		glfwSwapInterval(1);
		glfwSwapBuffers(window);
		glfwPollEvents();
	}
	for (int c = 0; world_x * world_z; c++) {
		glDeleteVertexArrays(1, &chunks[c]->VAO);
		glDeleteBuffers(1, &chunks[c]->VBO);
		free(chunks[c]);
	}
	free(chunks);
	//glDeleteVertexArrays(1, &chunk.VAO);
	//glDeleteBuffers(1, &chunk.VBO);
	glDeleteProgram(&shaderprogram);
	glfwDestroyWindow(window);
	glfwTerminate();
	return 0;
}
